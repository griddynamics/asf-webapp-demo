# Encoding: utf-8
#
# Application: ASF Webapp Demo
# Component: Main
#
# Copyright 2014, Copyright (c) 2014 Grid Dynamics International, Inc. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

application:
  configuration:
    input.image_name:       "asf-webapp"
    input.image_version:    undefined
    input.docker_registry:  undefined
    input.docker_vm_ip:     undefined
  interfaces:
    input:
      docker_registry:  "bind(workflow#input.docker_registry)"
      docker_vm_ip:     "bind(workflow#input.docker_vm_ip)"
      image_name:       "bind(workflow#input.image_name)"
      image_version:    "bind(workflow#input.image_version)"
    output:
      webapp_endpoint:  "bind(workflow#result.webapp_endpoint)"
  components:
    workflow:
      type: workflow.Instance
      interfaces:
        input:
          docker_registry:
            type: configuration(string)
            name: Docker Registry Endpoint
          docker_vm_ip:
            type: configuration(string)
            name: Docker VM IP
          image_name:
            type: configuration(string)
            name: ASF Webapp image name
          image_version:
            type: configuration(string)
            name: ASF Webapp image version
        properties:
          nexus_username: consume-signal(string)
          nexus_password: consume-signal(string)
        result:
          webapp_endpoint:
            type: publish-signal(string)
            name: Webapp Endpoint
      configuration:
        configuration.triggers: {}
        configuration.workflows:
          launch:
            steps:
              - provision:
                  action: provisionVms
                  parameters:
                    roleName:           "docker"
                    staticIps:          [ "{$.docker_vm_ip}" ]
                    vmIdentity:         "core"
                    hardwareId:         m1.small
                    jcloudsIdentity:    undefined
                    jcloudsProvider:    undefined
                    jcloudsCredential:  undefined
                    jcloudsEndpoint:    undefined

              - deploy_webapp:
                  action: execrun
                  precedingPhases: [ "provision" ]
                  parameters:
                    roles: [ "docker" ]
                    command:
                      - |
                          ID=$$(docker run -d -p 8080 {$.docker_registry}/{$.image_name}:{$.image_version})
                          PORT=$$(docker port $${{ID}} | cut -d ':' -f2)
                          echo "ID=$${{ID}}" > asf-webapp-demo.properties
                          echo "PORT=$${{PORT}}" > asf-webapp-demo.properties
                          sleep 60
                          curl -L --silent --output /dev/null --fail --retry 5 --retry-delay 30 http://{$.docker_vm_ip}:$${{PORT}}/asf-webapp-demo

              - publish_endpoint:
                  action: execrun
                  precedingPhases: [ "deploy_webapp" ]
                  parameters:
                    roles: [ "docker" ]
                    command:
                      - |
                          source asf-webapp-demo.properties
                          echo "http://{$.docker_vm_ip}:$${{PORT}}/asf-webapp-demo"
                  output:
                    url: stdout
            return:
              webapp_endpoint:
                value: "{$.url.*.[0]}"

          destroy:
            steps:
              - destoy_webapp:
                  action: execrun
                  parameters:
                    roles: [ "docker" ]
                    command:
                      - |
                          source asf-webapp-demo.properties
                          if [ $${{ID}} != '' ]; then
                            docker rm -f $${{ID}}
                          fi
              - destroy:
                  action: undeployEnv
